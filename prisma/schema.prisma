generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id          Int     @id @default(autoincrement())
    email       String  @unique
    password    String
    displayName String  @map("display_name")
    picture     String?

    role               UserRole   @default(REGULAR)
    isVerified         Boolean    @default(false) @map("is_verified")
    isTwoFactorEnabled Boolean    @default(false) @map("is_two_factor_enabled")
    method             AuthMethod

    accounts Account[]

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    likes Likes[]

    @@map("users")
}

enum UserRole {
    REGULAR
    ADMIN
}

enum AuthMethod {
    CREDENTIALS
    GOOGLE
    YANDEX
}

model Transport {
    id               Int     @id @default(autoincrement())
    nameAuto         String  @map("name_auto")
    fullSpeed        Int?    @map("full_speed")
    speed100Time     Float?  @map("speed_100_time")
    speedMaxTime     Float?  @map("speed_max_time")
    volumeTank       Int?    @map("volume_tank")
    costLiter        Int?    @map("cost_liter")
    typeTank         String? @map("type_tank")
    slots            Int?
    price            Int?
    seats            Int?
    repairWithoutIns Int?    @map("repair_without_ins")
    repairLiteIns    Int?    @map("repair_lite_ins")
    repairStandIns   Int?    @map("repair_stand_ins")
    repairExcIns     Int?    @map("repair_exc_ins")
    liteInsurance    Int?    @map("lite_insurance")
    standInsurance   Int?    @map("stand_insurance")
    excInsurance     Int?    @map("exc_insurance")
    uniqueName       String  @map("unique_name")
    typeBody         String  @map("type_body")
    showroom         String?
    EPP              String? @map("epp")
    city             String
    stageCounter     Int?    @map("stage_counter")
    paintInter       String? @map("paint_inter")
    paintFirst       String? @map("paint_first")
    paintSecond      String? @map("paint_second")
    paintThird       String? @map("paint_third")
    antichrome       Int?
    accessories      String?
    rims             String?
    gosCostOld       Int[]   @map("gos_cost_old")
    class            String?
    units            Int?
    likes            Likes[]

    @@map("transport")
}

model Token {
    id Int @id @default(autoincrement())

    email     String
    token     String
    type      TokenType
    expiresIn DateTime  @map("expires_in")

    @@map("tokens")
}

enum TokenType {
    VERIFICATION
    TWO_FACTOR
    PASSWORD_RESET
}

model Skins {
    id       Int    @id @default(autoincrement())
    name     String
    price    Int
    shop     String
    gender   String
    timeYear String @map("time_year")

    @@map("skins")
}

model Likes {
    id          Int       @id @default(autoincrement())
    users       User      @relation(fields: [userId], references: [id])
    userId      Int       @map("user_id")
    transport   Transport @relation(fields: [transportId], references: [id])
    transportId Int       @map("transport_id")

    @@unique([userId, transportId])
    @@map("likes")
}

model Jobs {
    id Int @id @default(autoincrement())

    uniqueName          String @unique @map("unique_name")
    name                String
    lvl                 Int
    city                String
    about               String
    htmlDescriptionCode String @map("html_description_code")
    settings            Int

    @@map("jobs")
}

model Account {
    id Int @id @default(autoincrement())

    type     String
    provider String

    refreshToken String? @map("refresh_token")
    accessToken  String? @map("access_token")
    expiresAt    Int     @map("expires_at")

    user   User? @relation(fields: [userId], references: [id])
    userId Int?  @map("user_id")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@map("accounts")
}
